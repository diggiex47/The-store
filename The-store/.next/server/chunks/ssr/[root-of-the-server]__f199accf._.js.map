{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/app/SessionProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/SessionProvider.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/SessionProvider.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/app/SessionProvider.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/SessionProvider.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/SessionProvider.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport { withAccelerate } from \"@prisma/extension-accelerate\";\n\nconst globalForPrisma = global as unknown as {\n  prisma: PrismaClient | undefined ;\n};\n\nconst prisma =\n  globalForPrisma.prisma ?? new PrismaClient().$extends(withAccelerate());\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,kBAAkB;AAIxB,MAAM,SACJ,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY,GAAG,QAAQ,CAAC,CAAA,GAAA,oKAAA,CAAA,iBAAc,AAAD;AAErE,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/lib/env.ts"],"sourcesContent":["import zod from \"zod\";\n\nconst envSchema = zod.object({\n  DATABASE_URL: zod.string().nonempty(),\n  Google_Client_id: zod.string().nonempty(),\n  Google_secret: zod.string().nonempty(),\n  NEAUTH_SECRET: zod.string().nonempty(),\n  NEXTAUTH_URL: zod.string().nonempty(),\n  NEAUTH_CLIENT_ID: zod.string().nonempty(),\n});\n\nexport const env = envSchema.parse(process.env);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY,4IAAA,CAAA,UAAG,CAAC,MAAM,CAAC;IAC3B,cAAc,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;IACnC,kBAAkB,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;IACvC,eAAe,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;IACpC,eAAe,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;IACpC,cAAc,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;IACnC,kBAAkB,4IAAA,CAAA,UAAG,CAAC,MAAM,GAAG,QAAQ;AACzC;AAEO,MAAM,MAAM,UAAU,KAAK,CAAC,QAAQ,GAAG","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import prisma from \"@/lib/prisma\";\nimport { NextAuthOptions } from \"next-auth\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport NextAuth from \"next-auth/next\";\nimport { Adapter } from \"next-auth/adapters\";\nimport GoogleProvider from \"next-auth/providers/google\"\nimport { env } from \"@/lib/env\";\n\nexport const authOptions: NextAuthOptions = {\n    adapter: PrismaAdapter(prisma) as Adapter,\n    providers: [\n        GoogleProvider({\n            clientId: env.Google_Client_id,\n            clientSecret: env.Google_secret,\n        })\n    ]\n}\n\nconst handler = NextAuth(authOptions);\n\n\nexport { handler as GET , handler as POST };"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AAEA;AACA;;;;;;AAEO,MAAM,cAA+B;IACxC,SAAS,CAAA,GAAA,oJAAA,CAAA,gBAAa,AAAD,EAAE,oHAAA,CAAA,UAAM;IAC7B,WAAW;QACP,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACX,UAAU,iHAAA,CAAA,MAAG,CAAC,gBAAgB;YAC9B,cAAc,iHAAA,CAAA,MAAG,CAAC,aAAa;QACnC;KACH;AACL;AAEA,MAAM,UAAU,CAAA,GAAA,6IAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/app/Navbar/Navbar.tsx"],"sourcesContent":["import { getServerSession } from \"next-auth\";\nimport { redirect } from \"next/navigation\";\nimport { authOptions } from \"../api/auth/[...nextauth]/route\";\nimport UserMenuBtn from \"./UserMenuBtn\";\nasync function searchProducts(formData: FormData){\n\n    \"use server\";\n    const searchQuery = formData.get(\"searchQuery\")?.toString();\n\n\n    if(searchQuery){\n        redirect(\"/search?query=\" + searchQuery);\n    }\n}\n\n\nexport default async function Navbar() {\n  const session = await getServerSession(authOptions);\n  return (\n    <div className=\"bg-base-100\">\n      <div className=\"navbar max-w-7xl m-auto flex-col  sm:flex-row \">\n        <div className=\"flex-1\">\n            {/* using normal case to make it as you write otherwise it make everything in caps \n            btn and btn-ghost to give look like btn  */}\n          <a className=\"btn btn-ghost text-xl normal-case\">The Store</a>\n        </div>\n        <div className=\"flex-none gap-2\">\n          <form action={searchProducts}>\n            <div className=\"form-control\">\n                <input \n                name=\"searchQuery\"\n                placeholder=\"Search\"\n                className=\"input input-bordered w-full min-w-[150px] max-w-xs\"\n                ></input> </div>\n          </form> \n      \n        </div>\n      </div>\n    </div>\n  ); \n}\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AACA;;;;;;;MAEA,wBAAA,eAAe,eAAe,QAAkB;IAG5C,MAAM,cAAc,SAAS,GAAG,CAAC,gBAAgB;IAGjD,IAAG,aAAY;QACX,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,mBAAmB;IAChC;AACJ;IATe,iBAAf,+OAAA;AAYe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,wJAAA,CAAA,cAAW;IAClD,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;8BAGb,cAAA,8OAAC;wBAAE,WAAU;kCAAoC;;;;;;;;;;;8BAEnD,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAK,QAAQ;kCACZ,cAAA,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCACD,MAAK;oCACL,aAAY;oCACZ,WAAU;;;;;;gCACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOzB","debugId":null}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":["file:///home/milo/Project/The-store/src/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\n\n//now importing the session provider from the file which we created in the src/app folder\n// and we use currly braces when we are importing a default export or a named export.\nimport SessionProvider from \"./SessionProvider\"\nimport Navbar from \"./Navbar/Navbar\";\n\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"The Store\",\n  description: \"Give some Recive some\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" data-theme=\"light\">\n      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>\n       {/* wrapeed in the sessionprovider so the user session remains throughout all the compoenet of the site and it works smoothly  */}\n       \n       <SessionProvider> \n        <Navbar />\n        <main className=\"p-5 max-w-3xl m-auto\">\n        {children}\n        </main>\n        </SessionProvider>\n\n      </body>\n    </html>\n  );\n}\n  "],"names":[],"mappings":";;;;;;;AAIA,yFAAyF;AACzF,qFAAqF;AACrF;AACA;;;;;;;AAaO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;QAAK,cAAW;kBACzB,cAAA,8OAAC;YAAK,WAAW,GAAG,yIAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,8IAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,YAAY,CAAC;sBAGzE,cAAA,8OAAC,8HAAA,CAAA,UAAe;;kCACf,8OAAC,+HAAA,CAAA,UAAM;;;;;kCACP,8OAAC;wBAAK,WAAU;kCACf;;;;;;;;;;;;;;;;;;;;;;AAOT","debugId":null}}]
}
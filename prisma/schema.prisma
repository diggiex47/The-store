generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  imageUrl    String
  name        String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cartItem cartItem[]
}

model Cart {
  id        String     @id @default(uuid()) @db.Uuid
  userId    String?    @unique @db.Uuid // <-- CHANGE: Added @unique to enforce one-cart-per-user
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     cartItem[]
}

model cartItem {
  id        String  @id @default(uuid())
  productId String  @db.Uuid
  quantity  Int
  cartId    String  @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // <-- IMPROVEMENT: For very long tokens
  access_token      String? @db.Text // <-- IMPROVEMENT: For very long tokens
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // <-- IMPROVEMENT: For very long tokens
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Cart          Cart?     // <-- CHANGE: Changed from Cart[] to Cart? for a one-to-one relation
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  // This model is fine, but for consistency, cuid() is often used here
  // as it doesn't need to be a UUID. This is an optional style choice.
  id         String   @id @default(cuid()) // <-- IMPROVEMENT: Using cuid() is common here.
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
